@using FinanceiroPessoal.Apresentacao.Pages.Componentes
@using FinanceiroPessoal.Apresentacao.Shared
@using FinanceiroPessoal.ViewModels
@using MudBlazor
@using FinanceiroPessoal.Apresentacao.ViewModels
@using FinanceiroPessoal.Aplicacao.DTOs
@using FinanceiroPessoal.Dominio.Enums
@inject ISnackbar Snackbar
@inherits BaseModal<CategoriaViewModel>

<MudDialog>
    <DialogContent>
        <MudText Typo="Typo.h6">@Titulo</MudText>

        <MudTextField T="string"
                      Label="Nome da Categoria"
                      @bind-Value="Categoria.Nome"
                      Required="true" />

        <MudTextField T="string"
                      Label="Descrição da Categoria"
                      @bind-Value="Categoria.Descricao" />

        <MudSelect T="TipoCategoria"
                   Label="Tipo"
                   @bind-Value="Categoria.Tipo"
                   Required="true"
                   RequiredError="O tipo da categoria é obrigatório.">
            <MudSelectItem Value="TipoCategoria.Receita">Receita</MudSelectItem>
            <MudSelectItem Value="TipoCategoria.Despesa">Despesa</MudSelectItem>
        </MudSelect>
        <ErroValidacao ViewModel="ViewModel" />
    </DialogContent>

    <DialogActions>
        <MudButton Color="Color.Secondary" OnClick="Cancelar" Variant="Variant.Outlined">Cancelar</MudButton>
        <MudButton Color="Color.Primary" OnClick="Salvar" Variant="Variant.Filled">Salvar</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = default!;

    [Parameter] public CategoriaDto Categoria { get; set; } = new();

    private string Titulo => string.IsNullOrEmpty(Categoria.Id) ? "Adicionar Categoria" : "Editar Categoria";

    protected override void OnParametersSet()
    {
        // garante que Tipo tenha um valor válido
        if (!Enum.IsDefined(typeof(TipoCategoria), Categoria.Tipo))
            Categoria.Tipo = TipoCategoria.Receita;

        ViewModel.LimparMensagens();
        ViewModel.LimparTodosErros();
    }

    private async Task Salvar()
    {
        if (string.IsNullOrWhiteSpace(Categoria.Nome))
        {
            Snackbar.Add("O nome da categoria é obrigatório.", Severity.Warning);
            return;
        }

        if (!Enum.IsDefined(typeof(TipoCategoria), Categoria.Tipo))
        {
            Snackbar.Add("O tipo da categoria é obrigatório.", Severity.Warning);
            return;
        }

        // usa o ViewModel para salvar/editar
        if (string.IsNullOrEmpty(Categoria.Id))
        {
            await ViewModel.AdicionarCategoriaAsync(new CriarCategoriaDto
            {
                Nome = Categoria.Nome,
                Descricao = Categoria.Descricao,
                Tipo = Categoria.Tipo
            });
        }
        else
        {
            await ViewModel.AtualizarCategoriaAsync(Categoria.Id, new AtualizarCategoriaDto
            {
                Id = Categoria.Id,
                Nome = Categoria.Nome,
                Descricao = Categoria.Descricao,
                Tipo = Categoria.Tipo
            });
        }

        if (!string.IsNullOrEmpty(ViewModel.MensagemSucesso))
        {
            Snackbar.Add(ViewModel.MensagemSucesso, Severity.Success);
            MudDialog.Close(DialogResult.Ok(true));
        }
        else if (!string.IsNullOrEmpty(ViewModel.MensagemErro))
        {
            Snackbar.Add(ViewModel.MensagemErro, Severity.Error);
        }
        else
        {
            Snackbar.Add("Erro ao salvar categoria.", Severity.Error);
        }
    }

    private void Cancelar() => MudDialog.Cancel();
}
